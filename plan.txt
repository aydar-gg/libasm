Введение
Язык ассемблера (или ассемблера), часто сокращенно asm, - это язык программирования
низкого уровня для компьютера или другого программируемого устройства, в котором
существует очень сильное (но часто не однозначное) соответствие между языком и
инструкции машинного кода архитектуры. Каждый язык ассемблера специфичен для конкретной
компьютерной архитектуры. Напротив, большинство языков программирования высокого уровня,
как правило, переносимы на несколько архитектур, но требуют интерпретации или компиляции.
Язык ассемблера также можно назвать символическим машинным кодом.

Общие инструкции
• Ваши функции не должны завершаться неожиданно (ошибка сегментации, ошибка шины,
двойное освобождение и т.д.), за исключением неопределенного поведения. В этом случае
ваш проект будет считаться нефункциональным, и вы получите 0 во время оценки.
• Ваш Makefile должен содержать как минимум правила $ (NAME), all, clean, fclean и re.
И должен перекомпилировать / перекомпилировать только необходимые файлы.
• Чтобы превратить бонусы в свой проект, вы должны включить бонус правила в свой Makefile,
который добавит все различные заголовки, библиотеки или функции, запрещенные в основной
части проекта. Бонусы должны быть в другом файле _bonus. {C / h}. Оценка обязательной и
бонусной части проводится отдельно.
• Мы рекомендуем вам создавать программы тестирования для своего проекта, даже если эту
работу не нужно будет отправлять и оценивать. Это даст вам возможность легко проверить
свою работу и работу ваших коллег. Вы найдете эти тесты особенно полезными во время защиты.
Действительно, во время защиты вы можете использовать свои тесты и / или тесты партнера,
которого вы оцениваете.
• Отправьте свою работу в назначенный репозиторий git. Оцениваться будет только работа
в репозитории git. Если DeepThreadt назначен для оценки вашей работы, это будет сделано
после ваших оценок коллег. Если во время выставления оценок Deepoughtt в каком-либо
разделе вашей работы произойдет ошибка, оценка остановится.
• Вы должны написать 64-битный ASM. Остерегайтесь "соглашения о вызовах".
• Вы не можете использовать встроенный ASM, вы должны использовать файлы ’.s’.
• Вы должны скомпилировать свой ассемблерный код с помощью nasm.
• Вы должны использовать синтаксис Intel, а не AT&T.

Обязательная часть
• Библиотека должна называться libasm.a.
• Вы должны отправить основную программу, которая будет проверять ваши функции и
скомпилировать с вашей библиотекой, чтобы показать, что она работает.
• Вы должны переписать следующие функции в asm:
◦ ft_strlen (мужчина 3 стрлен)
◦ ft_strcpy (man 3 strcpy)
◦ ft_strcmp (man 3 strcmp)
◦ ft_write (человек 2 пишет)
◦ ft_read (человек 2 читает)
◦ ft_strdup (man 3 strdup, вы можете вызвать malloc)
• Вы должны проверять наличие ошибок во время системных вызовов и при необходимости правильно их устанавливать.
• Ваш код должен правильно установить переменную errno.
• Для этого вы можете вызвать extern ___error.

Бонусная часть
Вы можете переписать эти функции в asm. Функция связанного списка будет использовать следующую структуру:
typedef struct s_list
{
void * data;
struct s_list * следующий;
} t_list;
• ft_atoi_base (как в рыбалке)
• ft_list_push_front (как в рыбной ловле)
• ft_list_size (как в рыбалке)
• ft_list_sort (как в рыбной ловле)
• ft_list_remove_if (как в рыбалке)
